{"version":3,"sources":["Recipe.js","HealthType.js","App.js","serviceWorker.js","index.js"],"names":["Recipe","title","calories","image","ingredients","url","categories","cal","Math","floor","className","src","alt","map","cat","ingredient","key","index","text","href","MealMenu","props","type","value","checked","lowCarb","onChange","setLowCarb","lowFat","setLowFat","vegan","setVegan","vegetarian","setVegetarian","peanutFree","setPeanutFree","treeNutFree","setTreeNutFree","App","useState","recipes","setRecipes","search","setSearch","query","setQuery","reqURL","console","log","useEffect","getRecipes","a","fetch","response","json","data","hits","loadingDiv","onSubmit","e","preventDefault","placeholder","target","recipe","label","healthLabels","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.83153cf4.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Recipe.css'\r\n\r\nconst Recipe = ({ title, calories, image, ingredients, url, categories }) => {\r\n    // round down calorie total\r\n    const cal = Math.floor(calories)\r\n\r\n    \r\n    return (\r\n        <div className=\"recipe\">\r\n            <h1>{title}</h1>\r\n            <img className=\"image\" src={image} alt={title} />\r\n            <h2>Categories</h2>\r\n            {categories.map(cat => <p>{cat}</p>)}\r\n            <p><span className=\"calories\">Total Recipe Calories:</span> {cal}</p>\r\n            <h2 className=\"ingredient\">Ingredients</h2>\r\n            <ul>\r\n                {ingredients.map(ingredient => <li key={ingredient.index}>{ingredient.text}</li>)}\r\n            </ul>\r\n            <button className=\"recipe-link\" href={url}>Click Here for the full recipe</button>\r\n\r\n        </div>\r\n    )\r\n    //  } else {\r\n    //     return (\r\n    //         <div className=\"recipe\">\r\n    //         <h1>Your Recipe</h1>\r\n    //         <h2>Categories</h2>\r\n    //         <p>Your Recipe Categories</p>\r\n    //         <h2 className=\"ingredient\">Ingredients</h2>\r\n    //         <ul>\r\n    //             <li>Your</li>\r\n    //             <li>Recipe</li>\r\n    //             <li>Ingredients</li>\r\n    //             <li>Listed</li>\r\n    //             <li>Here</li>\r\n    //         </ul>\r\n    //         <button className=\"recipe-link\">Click Here for the full recipe</button>\r\n\r\n    //     </div>\r\n    //     )\r\n    // }\r\n}\r\n\r\nexport default Recipe;","import React from 'react';\r\nimport './HealthType.css';\r\n\r\nconst MealMenu = (props) => {\r\n    return(\r\n        <div>\r\n            <form>\r\n            <div className=\"checkbox\">\r\n                    <label>\r\n                        <input type=\"checkbox\" \r\n                        value=\"low-carb\" \r\n                        checked={props.lowCarb === true} \r\n                        onChange={props.lowCarb === true ? () => props.setLowCarb(false) : () => props.setLowCarb(true)} \r\n                        />\r\n                        Low-Carb\r\n                    </label>\r\n                </div>\r\n                <div className=\"checkbox\">\r\n                    <label>\r\n                        <input type=\"checkbox\" \r\n                        value=\"low-fat\" \r\n                        checked={props.lowFat === true} \r\n                        onChange={props.lowFat === true ? () => props.setLowFat(false) : () => props.setLowFat(true)}\r\n                        />\r\n                        Low-Fat\r\n                    </label>\r\n                </div>\r\n                <div className=\"checkbox\">\r\n                    <label>\r\n                        <input type=\"checkbox\" \r\n                        value=\"vegan\"\r\n                        checked={props.vegan === true} \r\n                        onChange={props.vegan === true ? () => props.setVegan(false) : () => props.setVegan(true)}\r\n                         />\r\n                        Vegan\r\n                    </label>\r\n                </div>\r\n                <div className=\"checkbox\">\r\n                    <label>\r\n                        <input type=\"checkbox\" \r\n                        value=\"vegetarian\"\r\n                        checked={props.vegetarian === true} \r\n                        onChange={props.vegetarian === true ? () => props.setVegetarian(false) : () => props.setVegetarian(true)}    \r\n                        />\r\n                        Vegetarian\r\n                    </label>\r\n                </div>\r\n                <div className=\"checkbox\">\r\n                    <label>\r\n                        <input type=\"checkbox\" \r\n                        value=\"peanut-free\" \r\n                        checked={props.peanutFree === true} \r\n                        onChange={props.peanutFree === true ? () => props.setPeanutFree(false) : () => props.setPeanutFree(true)}\r\n                        />\r\n                        Peanut-Free\r\n                    </label>\r\n                </div>\r\n                <div className=\"checkbox\">\r\n                    <label>\r\n                        <input type=\"checkbox\" \r\n                        value=\"tree-nut-free\" \r\n                        checked={props.treeNutFree === true} \r\n                        onChange={props.treeNutFree === true ? () => props.setTreeNutFree(false) : () => props.setTreeNutFree(true)}\r\n                        />\r\n                        Tree-nut-Free\r\n                    </label>\r\n                </div>\r\n                \r\n            </form>\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default MealMenu","import React from 'react';\nimport './App.css';\nimport { useEffect, useState } from 'react';\nimport Recipe from './Recipe';\nimport MealMenu from './HealthType';\n\nconst App = () => {\n\n  const APP_ID = \"326357f3\";\n  const APP_KEY = \"562ff76fbd2e4b9eb13bc248f24c9ec5\";\n\n  const [recipes, setRecipes] = useState([]);\n  const [search, setSearch] = useState('');\n  const [query, setQuery] = useState('')\n  const [lowCarb, setLowCarb] = useState(false);\n  const [lowFat, setLowFat] = useState(false);\n  const [vegan, setVegan] = useState(false);\n  const [vegetarian, setVegetarian] = useState(false);\n  const [peanutFree, setPeanutFree] = useState(false);\n  const [treeNutFree, setTreeNutFree] = useState(false);\n\n  let reqURL = `https://api.edamam.com/search?q=${query}&app_id=${APP_ID}&app_key=${APP_KEY}`;\n  \n  // add dietary sort options to URL if true\n  if (lowCarb){reqURL += '&diet=low-carb'};\n  if (lowFat){reqURL += '&diet=low-fat'};\n  if (vegan){reqURL += '&health=vegan'};\n  if (vegetarian){reqURL += '&health=vegetarian'};\n  if (peanutFree){reqURL += '&health=peanut-free'};\n  if (treeNutFree){reqURL += '&health=tree-nut-free'};\n  console.log(reqURL)\n\n  useEffect(() => {\n    getRecipes()\n  }, [query])\n\n  const getRecipes = async () => {\n    const response = await fetch(reqURL);\n    const data = await response.json();\n    setRecipes(data.hits);\n    console.log(data.hits);\n  }\n\n  const updateSearch = ({target}) => {\n    setSearch(target.value)\n    console.log(search)\n  }\n\n  const getSearch = (e) => {\n    e.preventDefault();\n    setQuery(search);\n    setSearch('');\n  }\n\n  const loadingDiv = query === '' ? <p></p> : <h2 className=\"recipes-head\" >Recipes</h2>\n\n  return (\n    <div className=\"App\">\n    {/* When loading horizontally centre div, move to top when loaded*/}\n      <div className={query === '' ? 'div-down' : null }>\n        <h1 className='title'>Find your perfect Recipe</h1>\n        <form onSubmit={getSearch} className=\"search-form\">\n          <input type=\"text\" className=\"search-bar\" placeholder=\"Particular Ingredient? Full Recipe?\" value={search} onChange={updateSearch}/>\n          <button className=\"search-button\" type=\"submit\">Search</button>\n        </form>\n        <MealMenu \n          lowCarb = {lowCarb}\n          setLowCarb = {setLowCarb}\n          lowFat = {lowFat}\n          setLowFat = {setLowFat}\n          vegan = {vegan}\n          setVegan = {setVegan}\n          vegetarian = {vegetarian}\n          setVegetarian = {setVegetarian}\n          peanutFree = {peanutFree}\n          setPeanutFree = {setPeanutFree}\n          treeNutFree = {treeNutFree}\n          setTreeNutFree = {setTreeNutFree}\n         />\n      </div>\n      <div className=\"recipes\">\n      {loadingDiv}\n      {recipes.map(recipe => (\n        <Recipe \n        key={recipe.recipe.label}\n        title={recipe.recipe.label} \n        calories={recipe.recipe.calories} \n        image={recipe.recipe.image} \n        ingredients={recipe.recipe.ingredients}\n        url={recipe.recipe.url}\n        categories={recipe.recipe.healthLabels}\n        />\n      ))}\n      </div>\n    </div>\n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}